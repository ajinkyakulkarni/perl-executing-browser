#!/usr/bin/perl -w

# Copyright (c) 2005 Hans Jeuken. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.

use strict;
use Term::ANSIColor;
use Syntax::Highlight::Engine::Kate;

# Input filename:
my $input_filename = $ARGV[0]; # input file is the first and only needed command line argument

# Remove double slash '//' from script filenames (if any):
$input_filename =~ s/\/\//\//g;

# Detect script language by file extension:
my $language;
if ($input_filename =~ ".pl" or $input_filename =~ ".PL"){
	$language = "Perl";
}
if ($input_filename =~ ".py" or $input_filename =~ ".PY"){
	$language = "Python";
}
if ($input_filename =~ ".php" or $input_filename =~ ".PHP"){
	$language = "PHP (HTML)";
}

# Open the input file read-only:
my $input_filehandle;
open ($input_filehandle, "<", "$input_filename");

# Read the file and push it into an array:
my @lines = <$input_filehandle>;
my $total_lines = scalar @lines;

# Detect Perl and Python using the shebang line.
# Perl and Python scripts may not have a file extension.
my $first_line = $lines[0];
if ($first_line =~ m/\#\!.*perl/){
	$language = "Perl";
}
if ($first_line =~ m/\#\!.*python/){
	$language = "Python";
}

# Determine line numbers format:
my $line_number_format;
if ($total_lines >= 1 and $total_lines <= 9) {
	$line_number_format = "%01d";
}
if ($total_lines >= 10 and $total_lines <= 99) {
	$line_number_format = "%02d";
}
if ($total_lines >= 100 and $total_lines <= 999) {
	$line_number_format = "%03d";
}
if ($total_lines >= 1000 and $total_lines <= 9999) {
	$line_number_format = "%04d";
}

# Syntax::Highlight::Engine::Kate settings:
 my $highlighter = new Syntax::Highlight::Engine::Kate(
    language => $language,
    substitutions => {
       "<" => "&lt;",
       ">" => "&gt;",
       "&" => "&amp;",
       " " => "&nbsp;",
       "\t" => "&nbsp;&nbsp;&nbsp;",
       "\n" => "<BR>\n",
    },
    format_table => {
       Alert => ["<font color=\"#0000ff\">", "</font>"],
       BaseN => ["<font color=\"#007f00\">", "</font>"],
       BString => ["<font color=\"#c9a7ff\">", "</font>"],
       Char => ["<font color=\"#ff00ff\">", "</font>"],
       Comment => ["<font color=\"#7f7f7f\"><i>", "</i></font>"],
       DataType => ["<font color=\"#0000ff\">", "</font>"],
       DecVal => ["<font color=\"#00007f\">", "</font>"],
       Error => ["<font color=\"#ff0000\"><b><i>", "</i></b></font>"],
       Float => ["<font color=\"#00007f\">", "</font>"],
       Function => ["<font color=\"#007f00\">", "</font>"],
       IString => ["<font color=\"#ff0000\">", ""],
       Keyword => ["<b>", "</b>"],
       Normal => ["", ""],
       Operator => ["<font color=\"#ffa500\">", "</font>"],
       Others => ["<font color=\"#b03060\">", "</font>"],
       RegionMarker => ["<font color=\"#96b9ff\"><i>", "</i></font>"],
       Reserved => ["<font color=\"#9b30ff\"><b>", "</b></font>"],
       String => ["<font color=\"#ff0000\">", "</font>"],
       Variable => ["<font color=\"#0000ff\"><b>", "</b></font>"],
       Warning => ["<font color=\"#0000ff\"><b><i>", "</b></i></font>"],
    },
 );

# Highlight the syntax of the input file:
print "<html>\n";
print "<head>\n";
print "<title>$input_filename</title>\n";

print "<style type='text/css'>
			body {
				text-align: left;
				font-family: 'Consolas', 'Monaco', 'Bitstream Vera Sans Mono', 'Courier New', Courier, monospace;
				font-size: 14px;
				background-color: #FFFFFF;
				color: #000000;
				}
			.line_number {
				-webkit-user-select: none;
				-webkit-touch-callout: none;
				user-select: none;
				background-color: #C0C0C0;
				color: #000000;
				padding-left: 3px;
				padding-right: 3px;
				padding-top: 2px;
				padding-bottom: 2px;
				display: inline-block;
				}
	</style>\n";

print "<meta http-equiv='Content-Type' content='text/html; charset=utf-8'>\n";
print "</head>\n";

print "<body>\n";

my $line;
my $line_number;
my $formatted_line_number;
foreach $line (@lines){
	$line_number++;
	$formatted_line_number = sprintf ($line_number_format, $line_number);
	print "<a id='$line_number' class='line_number'>$formatted_line_number</a> &nbsp;";
	print $highlighter->highlightText ($line);
}

print "</body>\n";

print "</html>\n";

# Close the input file:
close ($input_filehandle);
